function EvolveShapeWithLinearViscoelasticFoundation
% Set the parameters
kf = 0.16; % Dimensional foundational stiffness
h = 0.015; % Thickness of the rod cross section
w = 0.01; % Width of the rod cross section
L0 = 0.125; % Dimensional length of the rod
L = 2*sqrt(3)*L0/h; %Dimensionless length
K = kf*h/(12*w); % Dimensionless foundation stiffness
n3s = 0; % Target axial tension
Es = 1; % Stretching stiffness
Eb = 1; % Bending stiffness
nu = 1; % Spring relaxation timescale
dt = 1e-3; % Time step

% Get the initial solution from AUTO
solData = load('~/Documents/Morphorods/Code/AUTO/Output/ConstantGrowthAndStiffnesses/Solutions/planarmorphorodsk0p02L29_sol_1');

solFromData.x = solData(:,1)';
solFromData.y = solData(:,2:end)';
% 
sigma = 0.1*L; % "Width" of Wnt gradient
% % Define the Wnt function
W = @(S, width) exp(-(L*(S - 0.5)/width).^2);

eta = 1.0/trapz(solFromData.x, W(solFromData.x, sigma)); % Define eta such that the area is unit one
% eta = 1;
mu = 0; 

parameters.K = K;% Foundation stiffness
parameters.L = L; % Rod length
parameters.sigma = sigma; % Width of wnt gradient
parameters.mu = mu; % Rate of mechanical inhibition
parameters.eta = eta; % Rate of chemical change
parameters.n3s = n3s; % Target axial stress
parameters.Es = Es; % Stretch stiffness
parameters.Eb = Eb; % Bending stiffness
parameters.ext = 0; % Exstensibility
parameters.nu = nu; % Foundation relaxation timescale
parameters.dt = dt; % Time step

%% Solve the initial bvp to obtain a structure for the first solution.

SOld = solFromData.y(1,:);
xOld = solFromData.y(2,:);
yOld = solFromData.y(3,:);
FOld = solFromData.y(4,:);
GOld = solFromData.y(5,:);
thetaOld = solFromData.y(6,:);
n3Old = FOld.*cos(thetaOld) + GOld.*sin(thetaOld);

gammaOld = 1;
firstGamma = gammaOld.*(1 + dt*(eta*W(solFromData.x, sigma) + mu.*(n3Old - n3s)));
parameters.gamma = firstGamma;

% parameters.K = K.*firstGamma;

parameters.PX = K.*(xOld - SOld);
parameters.PY = K.*yOld;

% Define the ODEs and BCs
DerivFun = @(x, M) LinearViscoelasticFoundationOdes(x, M, solFromData, parameters);

% Set the boundary conditions 
BcFun = @(Ml, Mr) NonUniformGrowthBCs(Ml, Mr, parameters);

% Set the tolerances and max. number of mesh points
solOptions = bvpset('RelTol', 1e-8,'AbsTol', 1e-8, 'NMax', 1e9, 'Vectorized', 'On');

% Solve the system. 
numSol = bvp4c(DerivFun, BcFun, solFromData, solOptions);

% plot(initSol.x, initSol.y(3,:))

initSol.x = solFromData.x;
initSol.y = deval(numSol, solFromData.x); 
                            
